package net.oktawia.crazyae2addons.defs;

import appeng.init.client.InitScreens;
import net.minecraftforge.fml.ModList;
import net.oktawia.crazyae2addons.menus.*;
import net.oktawia.crazyae2addons.screens.*;

public class Screens {
    public static void register() {
        InitScreens.register(
                Menus.CRAFTING_CANCELER_MENU,
                CraftingCancelerScreen<CraftingCancelerMenu>::new,
                "/screens/crafting_canceler.json"
        );
        InitScreens.register(
                Menus.ENTITY_TICKER_MENU,
                EntityTickerScreen<EntityTickerMenu>::new,
                "/screens/entity_ticker.json"
        );
        InitScreens.register(
                Menus.NBT_EXPORT_BUS_MENU,
                NBTExportBusScreen<NBTExportBusMenu>::new,
                "/screens/nbt_export_bus.json"
        );
        InitScreens.register(
                Menus.CRAZY_PATTERN_MODIFIER_MENU,
                CrazyPatternModifierScreen<CrazyPatternModifierMenu>::new,
                "/screens/crazy_pattern_modifier.json"
        );
        InitScreens.register(
                Menus.DISPLAY_MENU,
                DisplayScreen<DisplayMenu>::new,
                "/screens/display.json"
        );
        InitScreens.register(
                Menus.ME_DATA_CONTROLLER_MENU,
                MEDataControllerScreen<MEDataControllerMenu>::new,
                "/screens/me_data_controller.json"
        );
        InitScreens.register(
                Menus.DATA_EXTRACTOR_MENU,
                DataExtractorScreen<DataExtractorMenu>::new,
                "/screens/data_extractor.json"
        );
        InitScreens.register(
                Menus.DATA_PROCESSOR_MENU,
                DataProcessorScreen<DataProcessorMenu>::new,
                "/screens/data_processor.json"
        );
        InitScreens.register(
                Menus.DATA_PROCESSOR_SUB_MENU,
                DataProcessorSubScreen<DataProcessorSubMenu>::new,
                "/screens/data_processor_sub.json"
        );
        InitScreens.register(
                Menus.DATA_TRACKER_MENU,
                DataTrackerScreen<DataTrackerMenu>::new,
                "/screens/data_tracker.json"
        );
        InitScreens.register(
                Menus.CHUNKY_FLUID_P2P_TUNNEL_MENU,
                ChunkyFluidP2PTunnelScreen<ChunkyFluidP2PTunnelMenu>::new,
                "/screens/chunky_fluid_p2p_tunnel.json"
        );
        InitScreens.register(
                Menus.ENERGY_EXPORTER_MENU,
                EnergyExporterScreen<EnergyExporterMenu>::new,
                "/screens/energy_exporter.json"
        );
        InitScreens.register(
                Menus.RIGHT_CLICK_PROVIDER_MENU,
                RightClickProviderScreen<RightClickProviderMenu>::new,
                "/screens/rc_provider.json"
        );
        InitScreens.register(
                Menus.AMPERE_METER_MENU,
                AmpereMeterScreen<AmpereMeterMenu>::new,
                "/screens/ampere_meter.json"
        );
        InitScreens.register(
                Menus.ISOLATED_DATA_PROCESSOR_MENU,
                IsolatedDataProcessorScreen<IsolatedDataProcessorMenu>::new,
                "/screens/data_processor.json"
        );
        InitScreens.register(
                Menus.ISOLATED_DATA_PROCESSOR_SUBMENU,
                IsolatedDataProcessorSubScreen<IsolatedDataProcessorSubMenu>::new,
                "/screens/data_processor_sub.json"
        );
        InitScreens.register(
                Menus.CRAZY_PATTERN_MULTIPLIER_MENU,
                CrazyPatternMultiplierScreen<CrazyPatternMultiplierMenu>::new,
                "/screens/crazy_pattern_multiplier.json"
        );
        InitScreens.register(
                Menus.IMPULSED_PATTERN_PROVIDER_MENU,
                ImpulsedPatternProviderScreen<ImpulsedPatternProviderMenu>::new,
                "/screens/impulsed_pp.json"
        );
        InitScreens.register(
                Menus.SIGNALLING_INTERFACE_MENU,
                SignallingInterfaceScreen<SignallingInterfaceMenu>::new,
                "/screens/signalling_interface.json"
        );
        InitScreens.register(
                Menus.SET_STOCK_AMOUNT_MENU,
                SetStockAmountScreen<SetStockAmountMenu>::new,
                "/screens/set_stock_amount.json"
        );
        if (ModList.get().isLoaded("gtceu")){
            InitScreens.register(
                Menus.CIRCUITED_PATTERN_PROVIDER_MENU,
                CircuitedPatternProviderScreen<CircuitedPatternProviderMenu>::new,
                "/screens/circuited_pp.json"
            );
        }
    }
}
